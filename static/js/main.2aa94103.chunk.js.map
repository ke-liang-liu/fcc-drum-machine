{"version":3,"sources":["components/Keys.js","App.js","serviceWorker.js","index.js"],"names":["keys","keyNum","keyLetter","id","url","DrumPad","props","Button","className","style","height","variant","onClick","updateDisplayAndSound","keyObj","fullWidth","src","App","useState","String","fromCharCode","display","setDisplay","useEffect","handleKeyPress","e","key","find","ele","keyCode","document","addEventListener","removeEventListener","str","clipLetterId","sound","getElementById","currentTime","play","setTimeout","console","log","Container","maxWidth","Grid","container","justify","spacing","item","xs","Typography","align","gutterBottom","map","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAWeA,EAXF,CACX,CAAEC,OAAQ,GAAIC,UAAW,IAAKC,GAAI,WAAYC,IAAK,4DACnD,CAAEH,OAAQ,GAAIC,UAAW,IAAKC,GAAI,WAAYC,IAAK,4DACnD,CAAEH,OAAQ,GAAIC,UAAW,IAAKC,GAAI,WAAYC,IAAK,4DACnD,CAAEH,OAAQ,GAAIC,UAAW,IAAKC,GAAI,WAAYC,IAAK,8DACnD,CAAEH,OAAQ,GAAIC,UAAW,IAAKC,GAAI,OAAQC,IAAK,4DAC/C,CAAEH,OAAQ,GAAIC,UAAW,IAAKC,GAAI,UAAWC,IAAK,0DAClD,CAAEH,OAAQ,GAAIC,UAAW,IAAKC,GAAI,cAAeC,IAAK,8DACtD,CAAEH,OAAQ,GAAIC,UAAW,IAAKC,GAAI,OAAQC,IAAK,8DAC/C,CAAEH,OAAQ,GAAIC,UAAW,IAAKC,GAAI,YAAaC,IAAK,2DCLhDC,EAAU,SAACC,GAIf,OACE,kBAACC,EAAA,EAAD,CACEC,UAAU,WACVC,MAAO,CAAEC,OAAQ,IACjBC,QAAQ,YACRC,QARmB,WACrBN,EAAMO,sBAAsBP,EAAMQ,OAAOX,GAAIG,EAAMQ,OAAOZ,YAQxDa,WAAS,GAERT,EAAMQ,OAAOZ,UACd,2BAAOM,UAAU,OAAOL,GAAIG,EAAMQ,OAAOZ,UAAWc,IAAKV,EAAMQ,OAAOV,QAkD7Da,MA7Cf,WAAgB,IAAD,EACiBC,mBAASC,OAAOC,aAAa,MAD9C,mBACNC,EADM,KACGC,EADH,KAEbC,qBAAU,WACR,SAASC,EAAeC,GACtB,IAAMC,EAAM1B,EAAK2B,MAAK,SAAAC,GAAG,OAAIA,EAAI3B,SAAWwB,EAAEI,WAC1CH,GACFb,EAAsBa,EAAIvB,GAAIuB,EAAIxB,WAMtC,OAFA4B,SAASC,iBAAiB,UAAWP,GAE9B,WACLM,SAASE,oBAAoB,UAAWR,MAEzC,IAEH,IAAMX,EAAwB,SAACoB,EAAKC,GAClCZ,EAAWW,GACX,IAAME,EAAQL,SAASM,eAAeF,GACtCC,EAAME,YAAc,EACpBF,EAAMG,OACNC,YAAW,WAAQC,QAAQC,IAAI,iBAAkB,MAGnD,OACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMzC,GAAG,eAAe0C,WAAS,EAACC,QAAQ,SAASC,QAAS,GAC1D,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAAC7C,GAAG,UAAU8C,GAAI,IAC1B,kBAACC,EAAA,EAAD,CAAYvC,QAAQ,KAAKwC,MAAM,SAASC,cAAY,GACjD/B,IAGJrB,EAAKqD,KAAI,SAAAvC,GACR,OACE,kBAAC8B,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGvB,IAAKZ,EAAOb,QAC5B,kBAAC,EAAD,CAASa,OAAQA,EAAQD,sBAAuBA,WC9C1CyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAASM,eAAe,SD6H3C,kBAAmByB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2aa94103.chunk.js","sourcesContent":["const keys = [\n  { keyNum: 81, keyLetter: 'Q', id: 'Heater-1', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3' },\n  { keyNum: 87, keyLetter: 'W', id: 'Heater-2', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3' },\n  { keyNum: 69, keyLetter: 'E', id: 'Heater-3', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3' },\n  { keyNum: 65, keyLetter: 'A', id: 'Heater-4', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3' },\n  { keyNum: 83, keyLetter: 'S', id: 'Clap', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3' },\n  { keyNum: 68, keyLetter: 'D', id: 'Open-HH', url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3' },\n  { keyNum: 90, keyLetter: 'Z', id: \"Kick-n'-Hat\", url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3' },\n  { keyNum: 88, keyLetter: 'X', id: 'Kick', url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3' },\n  { keyNum: 67, keyLetter: 'C', id: 'Closed-HH', url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3' },];\n\nexport default keys;","import React, { useState, useEffect } from 'react';\nimport { Grid, Typography, Button, Container } from '@material-ui/core/';\nimport keys from './components/Keys';\n\nconst DrumPad = (props) => {\n  const onClickHandler = () => {\n    props.updateDisplayAndSound(props.keyObj.id, props.keyObj.keyLetter);\n  }\n  return (\n    <Button\n      className='drum-pad'\n      style={{ height: 90 }}\n      variant='contained'\n      onClick={onClickHandler}\n      fullWidth\n    >\n      {props.keyObj.keyLetter}\n      <audio className='clip' id={props.keyObj.keyLetter} src={props.keyObj.url}></audio>\n    </Button>\n  );\n}\n\nfunction App() {\n  const [display, setDisplay] = useState(String.fromCharCode(160));\n  useEffect(() => {\n    function handleKeyPress(e) {\n      const key = keys.find(ele => ele.keyNum === e.keyCode)\n      if (key) {\n        updateDisplayAndSound(key.id, key.keyLetter);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyPress);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, []);\n\n  const updateDisplayAndSound = (str, clipLetterId) => {\n    setDisplay(str);\n    const sound = document.getElementById(clipLetterId);\n    sound.currentTime = 0;\n    sound.play();\n    setTimeout(() => { console.log('wait 100 ms') }, 100);\n  }\n\n  return (\n    <Container maxWidth='sm'>\n      <Grid id='drum-machine' container justify='center' spacing={1}>\n        <Grid item id=\"display\" xs={12}>\n          <Typography variant=\"h3\" align='center' gutterBottom>\n            {display}\n          </Typography>\n        </Grid>\n        {keys.map(keyObj => {\n          return (\n            <Grid item xs={4} key={keyObj.keyNum}>\n              <DrumPad keyObj={keyObj} updateDisplayAndSound={updateDisplayAndSound} />\n            </Grid>\n          )\n        })}\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}